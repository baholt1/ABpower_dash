---
title: "powerscrape"
format: html
editor: visual
---

```{r}
library(rvest)
library(tidyverse)

aesoDashSource <- read_html('http://ets.aeso.ca/ets_web/ip/Market/Reports/CSDReportServlet')


# gas table
gas <- aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[11] %>% 
  html_table() %>% 
  .[[1]] 

# defining col names to be utilized
colNames <- c("ASSET", "MC", "TNG", "DCR")

# taking existing col names for type column
type <- colnames(gas)

# overwritting col names with def list
colnames(gas) <- colNames


gas <- gas %>% 
  #adding type, per original column names at import
  mutate(type = type[[1]]) %>% 
  # finding divisional row, and where present, using them to define subtype
  mutate(subtype = case_when(
             ASSET %in% c("Simple Cycle", "Cogeneration", "Combined Cycle", "Gas Fired Steam") ~ ASSET)) %>% 
  # fill remainder of subtype until new subtype
  fill(subtype, .direction = c("down")) %>% 
  # removing divsional rows (now that they are in column subtype)
  filter(!ASSET %in% 
           c("Simple Cycle", "Cogeneration", "Combined Cycle", "Gas Fired Steam", "ASSET"))


#for tables without an applicable subtype (ie. gas does not work)
AESOsimpleTable <- function(table, subtype) {
  summary <- aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[table] %>% 
  html_table() %>% 
  .[[1]] 
  
  colNames <- c("ASSET", "MC", "TNG", "DCR")
  
  type <- colnames(summary)
  colnames(summary) <- colNames
  
  summary <- summary %>% 
    mutate(type = type[[1]]) %>% 
    # no applicable subtype; placeholder
    mutate(subtype = subtype) %>% 
    # redudant first row
    filter(!ASSET %in% c("ASSET", "GROUP"))
    
  return(summary)
}
  
  

hydro <- AESOsimpleTable(13, "hydro")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[14] %>% 
  html_table() %>% 
  .[[1]] 

energyStor <- AESOsimpleTable(14, "energy storage")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[15] %>% 
  html_table() %>% 
  .[[1]] 

solar <- AESOsimpleTable(15, "solar")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[16] %>% 
  html_table() %>% 
  .[[1]] 

wind <- AESOsimpleTable(16, "wind")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[18] %>% 
  html_table() %>% 
  .[[1]] 

bioAndOther <- AESOsimpleTable(18, "biomass and other")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[19] %>% 
  html_table() %>% 
  .[[1]] 

=======
#for tables without an applicable subtype (ie. gas does not work)
AESOsimpleTable <- function(table, subtype) {
  summary <- aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[table] %>% 
  html_table() %>% 
  .[[1]] 
  
  colNames <- c("ASSET", "MC", "TNG", "DCR")
  
  type <- colnames(summary)
  colnames(summary) <- colNames
  
  summary <- summary %>% 
    mutate(type = type[[1]]) %>% 
    # no applicable subtype; placeholder
    mutate(subtype = subtype) %>% 
    # redudant first row
    filter(!ASSET %in% c("ASSET", "GROUP"))
    
  return(summary)
}

GenerationBySource <- function(){
# gas table
gas <- aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[11] %>% 
  html_table() %>% 
  .[[1]] 

# defining col names to be utilized
colNames <- c("ASSET", "MC", "TNG", "DCR")

# taking existing col names for type column
type <- colnames(gas)

# overwritting col names with def list
colnames(gas) <- colNames


gas <- gas %>% 
  #adding type, per original column names at import
  mutate(type = type[[1]]) %>% 
  # finding divisional row, and where present, using them to define subtype
  mutate(subtype = case_when(
             ASSET %in% c("Simple Cycle", "Cogeneration", "Combined Cycle", "Gas Fired Steam") ~ ASSET)) %>% 
  # fill remainder of subtype until new subtype
  fill(subtype, .direction = c("down")) %>% 
  # removing divsional rows (now that they are in column subtype)
  filter(!ASSET %in% 
           c("Simple Cycle", "Cogeneration", "Combined Cycle", "Gas Fired Steam", "ASSET"))


#for tables without an applicable subtype (ie. gas does not work)
hydro <- AESOsimpleTable(13, "hydro")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[14] %>% 
  html_table() %>% 
  .[[1]] 

energyStor <- AESOsimpleTable(14, "energy storage")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[15] %>% 
  html_table() %>% 
  .[[1]] 

solar <- AESOsimpleTable(15, "solar")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[16] %>% 
  html_table() %>% 
  .[[1]] 

wind <- AESOsimpleTable(16, "wind")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[18] %>% 
  html_table() %>% 
  .[[1]] 

bioAndOther <- AESOsimpleTable(18, "biomass and other")

aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[19] %>% 
  html_table() %>% 
  .[[1]] 



duel <- AESOsimpleTable(19, "duel fuel")


aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[20] %>% 
  html_table() %>% 
  .[[1]] 


coal <- AESOsimpleTable(20, "coal")

generationBySource <- rbind(gas, hydro, energyStor, solar, wind, bioAndOther, duel, coal)


remove(gas, hydro, energyStor, solar, wind, bioAndOther, duel, coal)



=======


remove(gas, hydro, energyStor, solar, wind, bioAndOther, duel, coal)
}

Summary <- function(){

summary <- aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[7] %>% 
  html_table() %>% 
  .[[1]]
  
  
colnames(summary) <- c("summary", "total", "drop")

# dropping empty lg column
summary <- summary %>% 
  select(-drop)

  

}


aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[8] %>% 
  html_table() %>% 
  .[[1]]



totalGeneration <- AESOsimpleTable(8, "total") %>% 
  rename(GENERATION = ASSET)


TotalGeneration <- function(){
totalGeneration <- AESOsimpleTable(8, "total") %>% 
  rename(GENERATION = ASSET)
}

Interchange <- function() {

interchange <- aesoDashSource %>% 
  html_elements(css = "table") %>% 
  .[9] %>% 
  html_table() %>% 
  .[[1]]

  
  
colnames(interchange) <- c("path", "interchangeFlow")



```

```{r}
library(tidyverse)

mastLocation <- rio::import('https://www.aeso.ca/assets/Uploads/grid-related-initiatives/Loss-Factors/Master-Loss-Factor-Location-List-for-2023_2022-05-27-4Posting.xlsx') 


colNames <- mastLocation %>% 
  slice(6) %>%
  unlist(use.names = FALSE)

colnames(mastLocation) <- colNames

mastLocation <- mastLocation %>% 
  slice(-1:-6) %>%
  separate_rows(`Source Asset`, sep = ",\\s*")

mastLocation <- mastLocation %>% 
  transmute(AssetID = `Source Asset`, Owner, AreaName = `Area Name`, Number)

generationBySource <- generationBySource %>%
  mutate(AssetID = str_extract(ASSET, "\\([A-Z0-9]{3,4}\\)")) %>%
  mutate(AssetID = str_remove_all(AssetID, "[\\(\\)]"))

generationByArea <- left_join(generationBySource, mastLocation, by = 'AssetID')


colnames(interchange) <- c("path", "interchangeFlow")
}

scrape <- function() {
  GenByS <- GenerationBySource()
  Smry <- Summary()
  Intchange <- Interchange()
  TotalGen <- TotalGeneration()
  
  return(GenByS)
  return(Smry)
  return(Intchange)
  return(TotalGen)
}

scrape()


```
